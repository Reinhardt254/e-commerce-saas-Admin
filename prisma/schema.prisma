// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url = env("DATABASE_URL")    
  relationMode = "prisma"
}


model Store {
  id          String   @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[] @relation(name: "StoreToBillBoard")
  categories  Category[] @relation(name: "StoreToCategory")
  sizes       Size[] @relation(name:"StoreToSize")
  colors      Color[] @relation(name:"StoreToColor")
  products    Product[] @relation(name:"StoreToProduct")
  orders      Order[] @relation(name:"StoreToOrder")
  createdAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt
}

model Billboard {
  id         String @id @default(uuid())
  storeId    String
  store      Store @relation(name: "StoreToBillBoard", fields: [storeId], references: [id])
  categories Category[]
  imageUrl   String
  label      String
  createdAt  DateTime @default(now())
  UpdatedAt  DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation(name: "StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation(name:"CategoryToProduct")
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String @id @default(uuid())
  storeId   String
  store     Store @relation(name:"StoreToSize", fields:[storeId], references: [id])
  products   Product[]
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id        String @id @default(uuid())
  storeId   String
  store     Store @relation(name:"StoreToColor", fields:[storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id         String  @id @default(uuid())
  storeId    String
  store      Store   @relation(name:"StoreToProduct", fields:[storeId], references:[id])
  categoryId String
  category   Category @relation(name:"CategoryToProduct", fields:[categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  sizeId     String
  size       Size     @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color    @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id         String @id @default(uuid())
  productId  String
  product    Product @relation(fields: [productId], references:[id], onDelete: Cascade)
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
}

model Order {
  id        String @id @default(uuid())
  storeId   String
  store     Store @relation(name:"StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean @default(false)
  phone      String @default("")
  address    String @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  order     Order @relation(fields:[orderId], references: [id])
  productId String
  product   Product @relation(fields:[productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

